local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "LB Battlegrounds",
    Icon = 0,
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by minkminkmilk2 on Roblox",
    ShowText = "Rayfield",
    Theme = "Default",
    ToggleUIKeybind = "K",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "Big Hub"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local Tab = Window:CreateTab("Lucky Blocks", "blocks")

local Button = Tab:CreateButton({
    Name = "Galaxy Block",
    Callback = function()
        game:GetService("ReplicatedStorage").SpawnGalaxyBlock:FireServer()
    end,
})

local Button = Tab:CreateButton({
    Name = "Super Block",
    Callback = function()
        game:GetService("ReplicatedStorage").SpawnSuperBlock:FireServer()
    end,
})

local Button = Tab:CreateButton({
    Name = "Rainbow Block",
    Callback = function()
        game:GetService("ReplicatedStorage").SpawnRainbowBlock:FireServer()
    end,
})

local Button = Tab:CreateButton({
    Name = "Lucky Block",
    Callback = function()
        game:GetService("ReplicatedStorage").SpawnLuckyBlock:FireServer()
    end,
})

local Button = Tab:CreateButton({
    Name = "Diamond Block",
    Callback = function()
        game:GetService("ReplicatedStorage").SpawnDiamondBlock:FireServer()
    end,
})

local TabPlayer = Window:CreateTab("Player", "user-round")

local SliderSpeed = TabPlayer:CreateSlider({
    Name = "Speed",
    Range = {16, 300},
    Increment = 2,
    Suffix = "WalkSpeed",
    CurrentValue = 16,
    Flag = "SpeedSlider",
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = Value
        end
    end,
})

local SliderJump = TabPlayer:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 2,
    Suffix = "JumpPower",
    CurrentValue = 50,
    Flag = "JumpSlider",
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = Value
        end
    end,
})

local SliderFOV = TabPlayer:CreateSlider({
    Name = "FOV",
    Range = {5, 120},
    Increment = 1,
    Suffix = "FOV",
    CurrentValue = 70,
    Flag = "FOVSlider",
    Callback = function(Value)
        workspace.CurrentCamera.FieldOfView = Value
    end,
})

local SliderGravity = TabPlayer:CreateSlider({
    Name = "Gravity",
    Range = {0, 1000},
    Increment = 2,
    Suffix = "Gravity",
    CurrentValue = 100,
    Flag = "GravitySlider",
    Callback = function(Value)
        workspace.Gravity = Value
    end,
})

local TPWalkDistance = 0
local SliderTP = TabPlayer:CreateSlider({
    Name = "TP Walk",
    Range = {0, 85},
    Increment = 1,
    Suffix = "TPWalk",
    CurrentValue = TPWalkDistance,
    Flag = "TPWalkSlider",
    Callback = function(Value)
        TPWalkDistance = Value
    end,
})

local ButtonReset = TabPlayer:CreateButton({
    Name = "Default Values (Doesn't update visually)",
    Callback = function()
        local player = game.Players.LocalPlayer

        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = 16
            player.Character.Humanoid.JumpPower = 50
        end

        workspace.CurrentCamera.FieldOfView = 70
        workspace.Gravity = 196

        local sliders = {
            {SliderSpeed, 16},
            {SliderJump, 50},
            {SliderFOV, 70},
            {SliderGravity, 196},
            {SliderTP, 0},
        }

        for _, data in pairs(sliders) do
            local sliderObj, defaultValue = unpack(data)
            sliderObj.CurrentValue = defaultValue
            if sliderObj.Callback then
                sliderObj.Callback(defaultValue)
            end
        end
    end,
})

local Tab = Window:CreateTab("Troll", "laugh")

local Button = Tab:CreateButton({
    Name = "Fling GUI",
    Callback = function()
        loadstring((function(t)local s=''for i=1,#t,2 do s=s..string.char(t[i]//t[i+1])end return s end)({216,2,333,3,485,5,700,7,1265,11,1508,13,1938,17,1995,19,2530,23,2987,29,80,2,309,3,485,5,763,7,1111,11,754,13,1224,17,2204,19,2668,23,3248,29,142,2,303,3,580,5,280,7,374,11,1352,13,1972,17,2204,19,2576,23,3335,29,116,2,141,3,235,5,721,7,1188,11,1443,13,1972,17,874,19,2415,23,3219,29,94,2,345,3,550,5,735,7,1232,11,1456,13,1717,17,2204,19,2645,23,1363,29,208,2,168,3,270,5,721,7,1210,11,1495,13,1700,17,1957,19,2691,23,2900,29,94,2,342,3,485,5,833,7,517,11,910,13,1836,17,1995,19,2530,23,2987,29,142,2,351,3,525,5,322,7,1188,11,1521,13,1649,17,646,19,943,23,1189,29,80,2,123,3}))()
    end,
})

local Button = Tab:CreateButton({
    Name = "Portal Gun(Not FE)",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/randomguy194/dollar-tree-portal-gun/main/portal%20gun%20ported'))()
    end,
})

local Tab = Window:CreateTab("Universal", "orbit")

local Button = Tab:CreateButton({
    Name = "Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
})

local Button = Tab:CreateButton({
    Name = "Nameless Admin",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/ltseverydayyou/Nameless-Admin/main/Source.lua"))()
    end,
})

local Button = Tab:CreateButton({
    Name = "Fly",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
    end,
})

local Button = Tab:CreateButton({
    Name = "Jerk Off(R6)",
    Callback = function()
        loadstring(game:HttpGet("https://pastefy.app/wa3v2Vgm/raw"))()
    end,
})

local Button = Tab:CreateButton({
    Name = "Jerk Off(R15)",
    Callback = function()
        loadstring(game:HttpGet("https://pastefy.app/YZoglOyJ/raw"))()
    end,
})

local Tab = Window:CreateTab("Input Boxes(More Accurate)", "text-cursor-input")

local Input = Tab:CreateInput({
    Name = "WalkSpeed",
    CurrentValue = "16",
    PlaceholderText = "Enter walk speed",
    RemoveTextAfterFocusLost = false,
    Flag = "SpeedInput",
    Callback = function(Text)
        local Value = tonumber(Text)
        if Value then
            local player = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.WalkSpeed = Value
            end
        end
    end,
})

local Input = Tab:CreateInput({
    Name = "Jump Power",
    CurrentValue = "",
    PlaceholderText = "Jump Power",
    RemoveTextAfterFocusLost = false,
    Flag = "JPInput",
    Callback = function(Text)
        local Value = tonumber(Text)
        if Value then
            local player = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild("Humanoid") then
                player.Character.Humanoid.JumpPower = Value
            end
        end
    end,
})

local Input = Tab:CreateInput({
    Name = "Gravity",
    CurrentValue = "100",
    PlaceholderText = "Enter Gravity",
    RemoveTextAfterFocusLost = false,
    Flag = "GravityInput",
    Callback = function(Text)
        local Value = tonumber(Text)
        if Value then
            workspace.Gravity = Value
        end
    end,
})

local InputGameID = TabPlayer:CreateInput({
    Name = "Server Hop Game ID",
    CurrentValue = tostring(game.PlaceId),
    PlaceholderText = "Enter Game/Place ID",
    RemoveTextAfterFocusLost = false,
    Flag = "ServerHopInput",
    Callback = function(Text)
        local PlaceID = tonumber(Text)
        if not PlaceID then
            warn("Invalid Game ID")
            return
        end
        local HttpService = game:GetService("HttpService")
        local TeleportService = game:GetService("TeleportService")
        local AllIDs = {}
        local foundAnything = ""
        local actualHour = os.date("!*t").hour
        local File = pcall(function()
            AllIDs = HttpService:JSONDecode(readfile("NotSameServers.json"))
        end)
        if not File then
            table.insert(AllIDs, actualHour)
            writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
        end
        local function TPReturner()
            local Site
            if foundAnything == "" then
                Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
            end
            if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
                foundAnything = Site.nextPageCursor
            end
            for i,v in pairs(Site.data) do
                local ID = tostring(v.id)
                local Possible = true
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    for _, Existing in pairs(AllIDs) do
                        if ID == tostring(Existing) then
                            Possible = false
                            break
                        end
                    end
                    if Possible then
                        table.insert(AllIDs, ID)
                        pcall(function()
                            writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
                            TeleportService:TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                        end)
                        wait(4)
                        return
                    end
                end
            end
        end
        spawn(function()
            while true do
                pcall(TPReturner)
                if foundAnything ~= "" then
                    pcall(TPReturner)
                end
                wait(2)
            end
        end)
    end,
})

local ButtonServerHop = TabPlayer:CreateButton({
    Name = "Server Hop",
    Callback = function()
        local ServerHopGameID = tonumber(InputGameID.CurrentValue)
        if not ServerHopGameID then
            warn("Invalid Game ID")
            return
        end
        local HttpService = game:GetService("HttpService")
        local TeleportService = game:GetService("TeleportService")
        local AllIDs = {}
        local foundAnything = ""
        local actualHour = os.date("!*t").hour
        local File = pcall(function()
            AllIDs = HttpService:JSONDecode(readfile("NotSameServers.json"))
        end)
        if not File then
            table.insert(AllIDs, actualHour)
            writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
        end
        local function TPReturner()
            local Site
            if foundAnything == "" then
                Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. ServerHopGameID .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. ServerHopGameID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
            end
            if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
                foundAnything = Site.nextPageCursor
            end
            for i,v in pairs(Site.data) do
                local ID = tostring(v.id)
                local Possible = true
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    for _, Existing in pairs(AllIDs) do
                        if ID == tostring(Existing) then
                            Possible = false
                            break
                        end
                    end
                    if Possible then
                        table.insert(AllIDs, ID)
                        pcall(function()
                            writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
                            if syn and syn.queue_on_teleport then
                                syn.queue_on_teleport('loadstring(game:HttpGet("https://raw.githubusercontent.com/Veaquach/LBBattlegroundsscript/refs/heads/main/Universal%20Lucky%20Block%20Battle%20Grounds%20Script.txt"))()')
                            elseif queue_on_teleport then
                                queue_on_teleport('loadstring(game:HttpGet("https://raw.githubusercontent.com/Veaquach/LBBattlegroundsscript/refs/heads/main/Universal%20Lucky%20Block%20Battle%20Grounds%20Script.txt"))()')
                            end
                            TeleportService:TeleportToPlaceInstance(ServerHopGameID, ID, game.Players.LocalPlayer)
                        end)
                        wait(4)
                        return
                    end
                end
            end
        end
        TPReturner()
    end,
})

local Tab = Window:CreateTab("Toggles", "toggle-right")

local Toggle = Tab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "InfiniteJump",
    Callback = (function()
        local connection
        local charConnection
        return function(Value)
            local Player = game:GetService("Players").LocalPlayer
            local UIS = game:GetService("UserInputService")
            local function setupCharacter(Character)
                if connection then connection:Disconnect() end
                connection = UIS.InputBegan:Connect(function(input, gameProcessed)
                    if input.KeyCode == Enum.KeyCode.Space then
                        local Humanoid = Character:FindFirstChildOfClass("Humanoid")
                        if Humanoid then
                            Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        end
                    end
                end)
            end
            if Value then
                if Player.Character then
                    setupCharacter(Player.Character)
                end
                if not charConnection then
                    charConnection = Player.CharacterAdded:Connect(setupCharacter)
                end
            else
                if connection then
                    connection:Disconnect()
                    connection = nil
                end
                if charConnection then
                    charConnection:Disconnect()
                    charConnection = nil
                end
            end
        end
    end)(),
})
